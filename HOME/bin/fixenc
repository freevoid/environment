#!/usr/bin/env python
import os

import chardet
import entrypoint

MIN_CONFIDENCE = 0.9

def encoding_fix(nodename, min_confidence=MIN_CONFIDENCE,
        char_detector=chardet.detect, verbose=False, pretend=False):
    detected = char_detector(nodename)
    if verbose:
        print '='*80
        print "Encountered:", nodename
        print "Detected:", detected
    if detected['confidence'] > min_confidence:
        encoding = detected['encoding']
        if encoding != 'utf-8' and encoding is not None:
            newname = nodename.decode(encoding)
            if verbose: print "New name:", newname
            if newname != nodename:
                if verbose: print "Renaming to new name:", newname
                if not pretend:
                    os.rename(nodename, newname)

def recursive_encoding_fix(dir, force_encoding=None, **kwargs):
    if force_encoding is not None:
        char_detector = lambda input_: {'confidence': 1.0, 'encoding': force_encoding}
    else:
        char_detector = chardet.detect

    curried_encoding_fix = lambda path: encoding_fix(path, char_detector=char_detector, **kwargs)

    print "DIR:", type(dir), dir

    for dirpath, dirnames, filenames in os.walk(dir, topdown=False):
        for path in (os.path.join(dirpath, name) for name in filenames):
            curried_encoding_fix(path)
        for path in (os.path.join(dirpath, name) for name in dirnames):
            curried_encoding_fix(path)
    curried_encoding_fix(dir, **kwargs)

@entrypoint.entrypoint
def main(verbose=False, pretend=False, force_encoding=None,
        min_confidence=MIN_CONFIDENCE, *dirs):
    for dir in dirs:
        recursive_encoding_fix(dir, verbose=verbose, pretend=pretend,
                force_encoding=force_encoding, min_confidence=min_confidence)

